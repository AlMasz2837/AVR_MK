
MK4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  0000050e  000005a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000050e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080011e  0080011e  000005c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000630  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d18  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b9  00000000  00000000  000013d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006cf  00000000  00000000  00001b91  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d4  00000000  00000000  00002260  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045a  00000000  00000000  00002434  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004d8  00000000  00000000  0000288e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002d66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_12>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e0       	ldi	r30, 0x0E	; 14
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 31       	cpi	r26, 0x1E	; 30
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e1       	ldi	r26, 0x1E	; 30
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 32       	cpi	r26, 0x24	; 36
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 0b 02 	call	0x416	; 0x416 <main>
  9e:	0c 94 85 02 	jmp	0x50a	; 0x50a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_12>:

	}
}
//--------------------------------------------
ISR(TIMER1_COMPB_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
	
}
  b0:	0f 90       	pop	r0
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	0f 90       	pop	r0
  b6:	1f 90       	pop	r1
  b8:	18 95       	reti

000000ba <__vector_21>:
	SendChar(0x30 + bcd_buffer[1]);
	SendChar(0x30 + bcd_buffer[0]);
	SendString("\r\n");
}
ISR(ADC_vect)
{
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	8f 93       	push	r24
  c6:	9f 93       	push	r25
	display_val = ADC;
  c8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  cc:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  d0:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <__data_end+0x1>
  d4:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
}
  d8:	9f 91       	pop	r25
  da:	8f 91       	pop	r24
  dc:	0f 90       	pop	r0
  de:	0f be       	out	0x3f, r0	; 63
  e0:	0f 90       	pop	r0
  e2:	1f 90       	pop	r1
  e4:	18 95       	reti

000000e6 <InitPorts>:
	}
}
//--------------------------------------------
void InitPorts(void)
{
	DDRB=0xFF; //настройка выводов управления на выход
  e6:	8f ef       	ldi	r24, 0xFF	; 255
  e8:	84 b9       	out	0x04, r24	; 4
	PORTB=0;
  ea:	15 b8       	out	0x05, r1	; 5
	DDRD = (0<<PD2);
  ec:	1a b8       	out	0x0a, r1	; 10
	PORTD |= (1<<PD2);
  ee:	5a 9a       	sbi	0x0b, 2	; 11
  f0:	08 95       	ret

000000f2 <InitTimer1>:
}
void InitTimer1( void)
{
	TCCR1A = 0; //CTC mode - Clear Timer on Compare
  f2:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	//prescaler = sys_clk/64
	TCCR1B = (1<<CS11 | 1<<CS10 | 1<<WGM12);
  f6:	8b e0       	ldi	r24, 0x0B	; 11
  f8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TCNT1 = 0; //start value of counter
  fc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 100:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TIMSK1 |= (1<<OCIE1B);
 104:	ef e6       	ldi	r30, 0x6F	; 111
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	84 60       	ori	r24, 0x04	; 4
 10c:	80 83       	st	Z, r24
	OCR1A = 1562;
 10e:	8a e1       	ldi	r24, 0x1A	; 26
 110:	96 e0       	ldi	r25, 0x06	; 6
 112:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 116:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = 1562;
 11a:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 11e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 122:	08 95       	ret

00000124 <Bin2Dec>:
}
void Bin2Dec(uint16_t data)
{
 124:	ac 01       	movw	r20, r24
	bcd_buffer[3] = (uint8_t)(data/1000);
 126:	9c 01       	movw	r18, r24
 128:	36 95       	lsr	r19
 12a:	27 95       	ror	r18
 12c:	36 95       	lsr	r19
 12e:	27 95       	ror	r18
 130:	36 95       	lsr	r19
 132:	27 95       	ror	r18
 134:	a5 ec       	ldi	r26, 0xC5	; 197
 136:	b0 e2       	ldi	r27, 0x20	; 32
 138:	0e 94 76 02 	call	0x4ec	; 0x4ec <__umulhisi3>
 13c:	92 95       	swap	r25
 13e:	82 95       	swap	r24
 140:	8f 70       	andi	r24, 0x0F	; 15
 142:	89 27       	eor	r24, r25
 144:	9f 70       	andi	r25, 0x0F	; 15
 146:	89 27       	eor	r24, r25
 148:	e0 e2       	ldi	r30, 0x20	; 32
 14a:	f1 e0       	ldi	r31, 0x01	; 1
 14c:	83 83       	std	Z+3, r24	; 0x03
	data = data % 1000;
 14e:	68 ee       	ldi	r22, 0xE8	; 232
 150:	73 e0       	ldi	r23, 0x03	; 3
 152:	86 9f       	mul	r24, r22
 154:	90 01       	movw	r18, r0
 156:	87 9f       	mul	r24, r23
 158:	30 0d       	add	r19, r0
 15a:	96 9f       	mul	r25, r22
 15c:	30 0d       	add	r19, r0
 15e:	11 24       	eor	r1, r1
 160:	42 1b       	sub	r20, r18
 162:	53 0b       	sbc	r21, r19
	bcd_buffer[2] = (uint8_t)(data/100);
 164:	9a 01       	movw	r18, r20
 166:	36 95       	lsr	r19
 168:	27 95       	ror	r18
 16a:	36 95       	lsr	r19
 16c:	27 95       	ror	r18
 16e:	ab e7       	ldi	r26, 0x7B	; 123
 170:	b4 e1       	ldi	r27, 0x14	; 20
 172:	0e 94 76 02 	call	0x4ec	; 0x4ec <__umulhisi3>
 176:	96 95       	lsr	r25
 178:	87 95       	ror	r24
 17a:	82 83       	std	Z+2, r24	; 0x02
	data = data % 100;
 17c:	64 e6       	ldi	r22, 0x64	; 100
 17e:	68 9f       	mul	r22, r24
 180:	90 01       	movw	r18, r0
 182:	69 9f       	mul	r22, r25
 184:	30 0d       	add	r19, r0
 186:	11 24       	eor	r1, r1
 188:	42 1b       	sub	r20, r18
 18a:	53 0b       	sbc	r21, r19
	bcd_buffer[1] = (uint8_t)(data/10);
 18c:	9a 01       	movw	r18, r20
 18e:	ad ec       	ldi	r26, 0xCD	; 205
 190:	bc ec       	ldi	r27, 0xCC	; 204
 192:	0e 94 76 02 	call	0x4ec	; 0x4ec <__umulhisi3>
 196:	96 95       	lsr	r25
 198:	87 95       	ror	r24
 19a:	96 95       	lsr	r25
 19c:	87 95       	ror	r24
 19e:	96 95       	lsr	r25
 1a0:	87 95       	ror	r24
 1a2:	81 83       	std	Z+1, r24	; 0x01
	data = data % 10;
	bcd_buffer[0] = (uint8_t)(data);
 1a4:	9c 01       	movw	r18, r24
 1a6:	22 0f       	add	r18, r18
 1a8:	33 1f       	adc	r19, r19
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	82 0f       	add	r24, r18
 1b8:	93 1f       	adc	r25, r19
 1ba:	48 1b       	sub	r20, r24
 1bc:	59 0b       	sbc	r21, r25
 1be:	40 83       	st	Z, r20
 1c0:	08 95       	ret

000001c2 <InitADC>:
// 	//init values - DAT low, CLK low
// 	PORTB &= ~(1<<PB3 | 1<<PB5);
// }
void InitADC( void)
{
	ADMUX = (1<<MUX0); //Align left, ADC1
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRB = (1<<ADTS2 | 1<<ADTS0); //Start on Timer1 COMPB
 1c8:	85 e0       	ldi	r24, 0x05	; 5
 1ca:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	//Enable, auto update, IRQ enable
	ADCSRA = (1<<ADEN | 1<<ADATE | 1<<ADIE);
 1ce:	88 ea       	ldi	r24, 0xA8	; 168
 1d0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 1d4:	08 95       	ret

000001d6 <InitUSART>:
}
void InitUSART()
{
	UCSR0B = (1<<RXEN0 | 1<<TXEN0 | 1<<RXCIE0);
 1d6:	88 e9       	ldi	r24, 0x98	; 152
 1d8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1<<UCSZ01 | 1<<UCSZ00);
 1dc:	86 e0       	ldi	r24, 0x06	; 6
 1de:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0H = 0;
 1e2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = 0x0C;
 1e6:	8c e0       	ldi	r24, 0x0C	; 12
 1e8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 1ec:	08 95       	ret

000001ee <SendChar>:
}
void SendChar(char symbol)
{
	while (!(UCSR0A & (1<<UDRE0)));
 1ee:	e0 ec       	ldi	r30, 0xC0	; 192
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	90 81       	ld	r25, Z
 1f4:	95 ff       	sbrs	r25, 5
 1f6:	fd cf       	rjmp	.-6      	; 0x1f2 <SendChar+0x4>
	UDR0 = symbol;
 1f8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1fc:	08 95       	ret

000001fe <SendString>:
}
void SendString(char * buffer)
{
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	ec 01       	movw	r28, r24
	while(*buffer != 0)
 204:	88 81       	ld	r24, Y
 206:	88 23       	and	r24, r24
 208:	31 f0       	breq	.+12     	; 0x216 <SendString+0x18>
 20a:	21 96       	adiw	r28, 0x01	; 1
	{
		SendChar(*buffer++);
 20c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <SendChar>
	while (!(UCSR0A & (1<<UDRE0)));
	UDR0 = symbol;
}
void SendString(char * buffer)
{
	while(*buffer != 0)
 210:	89 91       	ld	r24, Y+
 212:	81 11       	cpse	r24, r1
 214:	fb cf       	rjmp	.-10     	; 0x20c <SendString+0xe>
	{
		SendChar(*buffer++);
	}
}
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	08 95       	ret

0000021c <__vector_1>:
ISR(TIMER1_COMPB_vect)
{
	
}
ISR(INT0_vect)
{
 21c:	1f 92       	push	r1
 21e:	0f 92       	push	r0
 220:	0f b6       	in	r0, 0x3f	; 63
 222:	0f 92       	push	r0
 224:	11 24       	eor	r1, r1
 226:	2f 93       	push	r18
 228:	3f 93       	push	r19
 22a:	4f 93       	push	r20
 22c:	5f 93       	push	r21
 22e:	6f 93       	push	r22
 230:	7f 93       	push	r23
 232:	8f 93       	push	r24
 234:	9f 93       	push	r25
 236:	af 93       	push	r26
 238:	bf 93       	push	r27
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	ef 93       	push	r30
 240:	ff 93       	push	r31
	SendString("Value = ");
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	91 e0       	ldi	r25, 0x01	; 1
 246:	0e 94 ff 00 	call	0x1fe	; 0x1fe <SendString>
	SendChar(0x30 + bcd_buffer[3]);
 24a:	c0 e2       	ldi	r28, 0x20	; 32
 24c:	d1 e0       	ldi	r29, 0x01	; 1
 24e:	8b 81       	ldd	r24, Y+3	; 0x03
 250:	80 5d       	subi	r24, 0xD0	; 208
 252:	0e 94 f7 00 	call	0x1ee	; 0x1ee <SendChar>
	SendChar(0x30 + bcd_buffer[2]);
 256:	8a 81       	ldd	r24, Y+2	; 0x02
 258:	80 5d       	subi	r24, 0xD0	; 208
 25a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <SendChar>
	SendChar(0x30 + bcd_buffer[1]);
 25e:	89 81       	ldd	r24, Y+1	; 0x01
 260:	80 5d       	subi	r24, 0xD0	; 208
 262:	0e 94 f7 00 	call	0x1ee	; 0x1ee <SendChar>
	SendChar(0x30 + bcd_buffer[0]);
 266:	88 81       	ld	r24, Y
 268:	80 5d       	subi	r24, 0xD0	; 208
 26a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <SendChar>
	SendString("\r\n");
 26e:	8b e1       	ldi	r24, 0x1B	; 27
 270:	91 e0       	ldi	r25, 0x01	; 1
 272:	0e 94 ff 00 	call	0x1fe	; 0x1fe <SendString>
}
 276:	ff 91       	pop	r31
 278:	ef 91       	pop	r30
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	bf 91       	pop	r27
 280:	af 91       	pop	r26
 282:	9f 91       	pop	r25
 284:	8f 91       	pop	r24
 286:	7f 91       	pop	r23
 288:	6f 91       	pop	r22
 28a:	5f 91       	pop	r21
 28c:	4f 91       	pop	r20
 28e:	3f 91       	pop	r19
 290:	2f 91       	pop	r18
 292:	0f 90       	pop	r0
 294:	0f be       	out	0x3f, r0	; 63
 296:	0f 90       	pop	r0
 298:	1f 90       	pop	r1
 29a:	18 95       	reti

0000029c <__vector_18>:
ISR(ADC_vect)
{
	display_val = ADC;
}
ISR(USART_RX_vect)
{
 29c:	1f 92       	push	r1
 29e:	0f 92       	push	r0
 2a0:	0f b6       	in	r0, 0x3f	; 63
 2a2:	0f 92       	push	r0
 2a4:	11 24       	eor	r1, r1
 2a6:	2f 93       	push	r18
 2a8:	3f 93       	push	r19
 2aa:	4f 93       	push	r20
 2ac:	5f 93       	push	r21
 2ae:	6f 93       	push	r22
 2b0:	7f 93       	push	r23
 2b2:	8f 93       	push	r24
 2b4:	9f 93       	push	r25
 2b6:	af 93       	push	r26
 2b8:	bf 93       	push	r27
 2ba:	ef 93       	push	r30
 2bc:	ff 93       	push	r31
	if(UDR0 == 0x20)
 2be:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2c2:	80 32       	cpi	r24, 0x20	; 32
 2c4:	21 f4       	brne	.+8      	; 0x2ce <__vector_18+0x32>
	{
		SendString("Roger that\r\n");
 2c6:	89 e0       	ldi	r24, 0x09	; 9
 2c8:	91 e0       	ldi	r25, 0x01	; 1
 2ca:	0e 94 ff 00 	call	0x1fe	; 0x1fe <SendString>
	}
}
 2ce:	ff 91       	pop	r31
 2d0:	ef 91       	pop	r30
 2d2:	bf 91       	pop	r27
 2d4:	af 91       	pop	r26
 2d6:	9f 91       	pop	r25
 2d8:	8f 91       	pop	r24
 2da:	7f 91       	pop	r23
 2dc:	6f 91       	pop	r22
 2de:	5f 91       	pop	r21
 2e0:	4f 91       	pop	r20
 2e2:	3f 91       	pop	r19
 2e4:	2f 91       	pop	r18
 2e6:	0f 90       	pop	r0
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	0f 90       	pop	r0
 2ec:	1f 90       	pop	r1
 2ee:	18 95       	reti

000002f0 <LCD_Read>:
	PORTB = 0;
}
char LCD_Read(void)
{
	char retval = 0;
	PORTB &= ~(1<<RS);
 2f0:	2d 98       	cbi	0x05, 5	; 5
	PORTB |= (1<<RW); // переход в режим чтения
 2f2:	2e 9a       	sbi	0x05, 6	; 5
	DDRB &= ~(1<<D4|1<<D5|1<<D6|1<<D7); //настройка выводов
 2f4:	84 b1       	in	r24, 0x04	; 4
 2f6:	80 7f       	andi	r24, 0xF0	; 240
 2f8:	84 b9       	out	0x04, r24	; 4
	// на вход
	PORTB |= (1<<E);
 2fa:	2f 9a       	sbi	0x05, 7	; 5
	asm("nop");
 2fc:	00 00       	nop
	asm("nop");
 2fe:	00 00       	nop
	retval = (PINB & 0x0F)<<4; //чтение старшей тетрады байта
 300:	23 b1       	in	r18, 0x03	; 3
	PORTB&=~(1<<E);
 302:	2f 98       	cbi	0x05, 7	; 5
	asm("nop");
 304:	00 00       	nop
	asm("nop");
 306:	00 00       	nop
	asm("nop");
 308:	00 00       	nop
	PORTB |= (1<<E);
 30a:	2f 9a       	sbi	0x05, 7	; 5
	asm("nop");
 30c:	00 00       	nop
	asm("nop");
 30e:	00 00       	nop
	retval |= (PINB & 0x0F); // чтение младшей тетрады
 310:	83 b1       	in	r24, 0x03	; 3
	PORTB&=~(1<<E);
 312:	2f 98       	cbi	0x05, 7	; 5
	DDRB |= (1<<D4|1<<D5|1<<D6|1<<D7); //настройка выводов
 314:	94 b1       	in	r25, 0x04	; 4
 316:	9f 60       	ori	r25, 0x0F	; 15
 318:	94 b9       	out	0x04, r25	; 4
	// на выход
	PORTB = 0;
 31a:	15 b8       	out	0x05, r1	; 5
	return retval; // возвращаемое значение – прочитанный байт
 31c:	8f 70       	andi	r24, 0x0F	; 15
 31e:	90 e1       	ldi	r25, 0x10	; 16
 320:	29 9f       	mul	r18, r25
 322:	90 01       	movw	r18, r0
 324:	11 24       	eor	r1, r1
}
 326:	82 2b       	or	r24, r18
 328:	08 95       	ret

0000032a <LCD_Write>:
	// знакоместо 5*8
	LCD_Write(CMD,0x0C); // включение отображения
	LCD_Write(CMD,0x06); // автоинкремент счетчика
}
void LCD_Write(uint8_t type,char data)
{
 32a:	cf 93       	push	r28
 32c:	df 93       	push	r29
 32e:	c8 2f       	mov	r28, r24
 330:	d6 2f       	mov	r29, r22
	uint8_t BF = 0x80;
	do
	{ // ожидание завершения предыдущей операции
		BF = 0x80 & LCD_Read();
 332:	0e 94 78 01 	call	0x2f0	; 0x2f0 <LCD_Read>
	}
	while(BF == 0x80);
 336:	88 23       	and	r24, r24
 338:	e4 f3       	brlt	.-8      	; 0x332 <LCD_Write+0x8>
	PORTB |= (type<<RS); // установка RS в зависимости от
 33a:	25 b1       	in	r18, 0x05	; 5
 33c:	30 e2       	ldi	r19, 0x20	; 32
 33e:	c3 9f       	mul	r28, r19
 340:	c0 01       	movw	r24, r0
 342:	11 24       	eor	r1, r1
 344:	82 2b       	or	r24, r18
 346:	85 b9       	out	0x05, r24	; 5
	// типа данных
	PORTB |= (1<<E);
 348:	2f 9a       	sbi	0x05, 7	; 5
	PORTB &= ~(0x0F);
 34a:	85 b1       	in	r24, 0x05	; 5
 34c:	80 7f       	andi	r24, 0xF0	; 240
 34e:	85 b9       	out	0x05, r24	; 5
	PORTB |= (0x0F & (data>>4)); // передача старшей тетрады
 350:	85 b1       	in	r24, 0x05	; 5
 352:	9d 2f       	mov	r25, r29
 354:	92 95       	swap	r25
 356:	9f 70       	andi	r25, 0x0F	; 15
 358:	89 2b       	or	r24, r25
 35a:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1<<E);
 35c:	2f 98       	cbi	0x05, 7	; 5
	asm("nop");
 35e:	00 00       	nop
	asm("nop");
 360:	00 00       	nop
	asm("nop");
 362:	00 00       	nop
	PORTB |= (1<<E);
 364:	2f 9a       	sbi	0x05, 7	; 5
	PORTB &= ~(0x0F);
 366:	85 b1       	in	r24, 0x05	; 5
 368:	80 7f       	andi	r24, 0xF0	; 240
 36a:	85 b9       	out	0x05, r24	; 5
	PORTB |= (0x0F & data); // передача младшей тетрады
 36c:	85 b1       	in	r24, 0x05	; 5
 36e:	df 70       	andi	r29, 0x0F	; 15
 370:	d8 2b       	or	r29, r24
 372:	d5 b9       	out	0x05, r29	; 5
	PORTB &= ~(1<<E);
 374:	2f 98       	cbi	0x05, 7	; 5
	PORTB = 0;
 376:	15 b8       	out	0x05, r1	; 5
}
 378:	df 91       	pop	r29
 37a:	cf 91       	pop	r28
 37c:	08 95       	ret

0000037e <InitLCD>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 37e:	8f e0       	ldi	r24, 0x0F	; 15
 380:	97 e2       	ldi	r25, 0x27	; 39
 382:	01 97       	sbiw	r24, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <InitLCD+0x4>
 386:	00 c0       	rjmp	.+0      	; 0x388 <InitLCD+0xa>
 388:	00 00       	nop
}
void InitLCD(void)
{
	uint8_t BF = 0x80; //объявление переменной-флага BF
	_delay_ms(40); //ожидание согласно алгоритму
	PORTB &= ~(1<<RS);
 38a:	2d 98       	cbi	0x05, 5	; 5
	PORTB = (0x30>>4); //выставление на шину данных
 38c:	83 e0       	ldi	r24, 0x03	; 3
 38e:	85 b9       	out	0x05, r24	; 5
	//старшей тетрады команды 0х30
	PORTB |= (1<<E); // выставление сигнала Е
 390:	2f 9a       	sbi	0x05, 7	; 5
	asm("nop"); // ожидание в течение 3-х тактов
 392:	00 00       	nop
	asm("nop"); // на частоте 8 МГц 1 такт=125нс
 394:	00 00       	nop
	asm("nop"); //требуется удержания Е не менее 250нс
 396:	00 00       	nop
	PORTB &= ~(1<<E); // сброс Е
 398:	2f 98       	cbi	0x05, 7	; 5
	PORTB = 0;
 39a:	15 b8       	out	0x05, r1	; 5
 39c:	e1 ee       	ldi	r30, 0xE1	; 225
 39e:	f4 e0       	ldi	r31, 0x04	; 4
 3a0:	31 97       	sbiw	r30, 0x01	; 1
 3a2:	f1 f7       	brne	.-4      	; 0x3a0 <InitLCD+0x22>
 3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <InitLCD+0x28>
 3a6:	00 00       	nop
	_delay_ms(5); // ожидание согласно алгоритму
	PORTB &= ~(1<<RS);
 3a8:	2d 98       	cbi	0x05, 5	; 5
	PORTB = (0x30>>4); // вторая отправка команды 0х30
 3aa:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1<<E);
 3ac:	2f 9a       	sbi	0x05, 7	; 5
	asm("nop");
 3ae:	00 00       	nop
	asm("nop");
 3b0:	00 00       	nop
	asm("nop");
 3b2:	00 00       	nop
	PORTB &= ~(1<<E);
 3b4:	2f 98       	cbi	0x05, 7	; 5
	PORTB = 0;
 3b6:	15 b8       	out	0x05, r1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3b8:	f2 e3       	ldi	r31, 0x32	; 50
 3ba:	fa 95       	dec	r31
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <InitLCD+0x3c>
	_delay_us(150); // ожидание согласно алгоритму
	PORTB &= ~(1<<RS);
 3be:	2d 98       	cbi	0x05, 5	; 5
	PORTB = (0x30>>4); // третья отправка команды 0х30
 3c0:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1<<E);
 3c2:	2f 9a       	sbi	0x05, 7	; 5
	asm("nop");
 3c4:	00 00       	nop
	asm("nop");
 3c6:	00 00       	nop
	asm("nop");
 3c8:	00 00       	nop
	PORTB &= ~(1<<E);
 3ca:	2f 98       	cbi	0x05, 7	; 5
	PORTB = 0;
 3cc:	15 b8       	out	0x05, r1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ce:	81 ee       	ldi	r24, 0xE1	; 225
 3d0:	94 e0       	ldi	r25, 0x04	; 4
 3d2:	01 97       	sbiw	r24, 0x01	; 1
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <InitLCD+0x54>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <InitLCD+0x5a>
 3d8:	00 00       	nop
	_delay_ms(5);
	do
	{ // ожидание до тех пор, пока флаг BF
		// не освободится
		BF = (0x80 & LCD_Read());
 3da:	0e 94 78 01 	call	0x2f0	; 0x2f0 <LCD_Read>
	}
	while(BF == 0x80);
 3de:	88 23       	and	r24, r24
 3e0:	e4 f3       	brlt	.-8      	; 0x3da <InitLCD+0x5c>
	PORTB &= ~(1<<RS);
 3e2:	2d 98       	cbi	0x05, 5	; 5
	PORTB = (0x20 >> 4); //установка ширины шины данных
 3e4:	82 e0       	ldi	r24, 0x02	; 2
 3e6:	85 b9       	out	0x05, r24	; 5
	//в 4 бит
	PORTB |= (1<<E);
 3e8:	2f 9a       	sbi	0x05, 7	; 5
	asm("nop");
 3ea:	00 00       	nop
	asm("nop");
 3ec:	00 00       	nop
	asm("nop");
 3ee:	00 00       	nop
	PORTB &= ~(1<<E);
 3f0:	2f 98       	cbi	0x05, 7	; 5
	PORTB = 0;
 3f2:	15 b8       	out	0x05, r1	; 5
	do
	{
		BF = (0x80 & LCD_Read());
 3f4:	0e 94 78 01 	call	0x2f0	; 0x2f0 <LCD_Read>
	}
	while(BF == 0x80);
 3f8:	88 23       	and	r24, r24
 3fa:	e4 f3       	brlt	.-8      	; 0x3f4 <InitLCD+0x76>
	// здесь обмен начинает работать по 4- проводной шине
	LCD_Write(CMD,0x28); // установка режима 2 строки,
 3fc:	68 e2       	ldi	r22, 0x28	; 40
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_Write>
	// знакоместо 5*8
	LCD_Write(CMD,0x0C); // включение отображения
 404:	6c e0       	ldi	r22, 0x0C	; 12
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_Write>
	LCD_Write(CMD,0x06); // автоинкремент счетчика
 40c:	66 e0       	ldi	r22, 0x06	; 6
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_Write>
 414:	08 95       	ret

00000416 <main>:
void SendString(char * buffer);
volatile uint8_t bcd_buffer[] = {0,0,0,0};
volatile uint16_t display_val = 0;
int main(void)
{
	InitPorts();
 416:	0e 94 73 00 	call	0xe6	; 0xe6 <InitPorts>
	//InitSPI();
	InitLCD();
 41a:	0e 94 bf 01 	call	0x37e	; 0x37e <InitLCD>
	InitTimer1();
 41e:	0e 94 79 00 	call	0xf2	; 0xf2 <InitTimer1>
	EIMSK |= (1<<INT0); //Enable INT0
 422:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= (1<<ISC01); //Trigger on falling edge of INT0
 424:	e9 e6       	ldi	r30, 0x69	; 105
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	80 81       	ld	r24, Z
 42a:	82 60       	ori	r24, 0x02	; 2
 42c:	80 83       	st	Z, r24
	InitADC();
 42e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <InitADC>
	InitUSART();
 432:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <InitUSART>
	sei(); //global interrupt enable
 436:	78 94       	sei
	PORTB &= ~(1<<PB0); //OE = low (active)
 438:	28 98       	cbi	0x05, 0	; 5
	//DisplayData(0);
	SendString("Hello\r\n");
 43a:	86 e1       	ldi	r24, 0x16	; 22
 43c:	91 e0       	ldi	r25, 0x01	; 1
 43e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <SendString>
	LCD_Write(DATA,'H');
 442:	68 e4       	ldi	r22, 0x48	; 72
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_Write>
	LCD_Write(DATA,'e');
 44a:	65 e6       	ldi	r22, 0x65	; 101
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_Write>
	LCD_Write(DATA,'l');
 452:	6c e6       	ldi	r22, 0x6C	; 108
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_Write>
	LCD_Write(DATA,'l');
 45a:	6c e6       	ldi	r22, 0x6C	; 108
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_Write>
	LCD_Write(DATA,'o');
 462:	6f e6       	ldi	r22, 0x6F	; 111
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_Write>
	LCD_Write(CMD,0x40|0x80); // переход на вторую строку
 46a:	60 ec       	ldi	r22, 0xC0	; 192
 46c:	80 e0       	ldi	r24, 0x00	; 0
 46e:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_Write>
	LCD_Write(DATA,'V');
 472:	66 e5       	ldi	r22, 0x56	; 86
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_Write>
	LCD_Write(DATA,'a');
 47a:	61 e6       	ldi	r22, 0x61	; 97
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_Write>
	LCD_Write(DATA,'l');
 482:	6c e6       	ldi	r22, 0x6C	; 108
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_Write>
	LCD_Write(DATA,'u');
 48a:	65 e7       	ldi	r22, 0x75	; 117
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_Write>
	LCD_Write(DATA,'e');
 492:	65 e6       	ldi	r22, 0x65	; 101
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_Write>
	LCD_Write(DATA,'=');
 49a:	6d e3       	ldi	r22, 0x3D	; 61
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_Write>
	LCD_Write(DATA,0x20); // вывод пробела
 4a2:	60 e2       	ldi	r22, 0x20	; 32
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_Write>
	{
		//DisplayData(display_val);
		Bin2Dec(display_val);
		LCD_Write(CMD,0x47|0x80); //установка курсора на 7-е
		//знакоместо 2-й строки
		LCD_Write(DATA,0x30+bcd_buffer[3]);
 4aa:	c0 e2       	ldi	r28, 0x20	; 32
 4ac:	d1 e0       	ldi	r29, 0x01	; 1
	LCD_Write(DATA,'=');
	LCD_Write(DATA,0x20); // вывод пробела
	while(1)
	{
		//DisplayData(display_val);
		Bin2Dec(display_val);
 4ae:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
 4b2:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x1>
 4b6:	0e 94 92 00 	call	0x124	; 0x124 <Bin2Dec>
		LCD_Write(CMD,0x47|0x80); //установка курсора на 7-е
 4ba:	67 ec       	ldi	r22, 0xC7	; 199
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_Write>
		//знакоместо 2-й строки
		LCD_Write(DATA,0x30+bcd_buffer[3]);
 4c2:	6b 81       	ldd	r22, Y+3	; 0x03
 4c4:	60 5d       	subi	r22, 0xD0	; 208
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_Write>
		LCD_Write(DATA,0x30+bcd_buffer[2]);
 4cc:	6a 81       	ldd	r22, Y+2	; 0x02
 4ce:	60 5d       	subi	r22, 0xD0	; 208
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_Write>
		LCD_Write(DATA,0x30+bcd_buffer[1]);
 4d6:	69 81       	ldd	r22, Y+1	; 0x01
 4d8:	60 5d       	subi	r22, 0xD0	; 208
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_Write>
		LCD_Write(DATA,0x30+bcd_buffer[0]);
 4e0:	68 81       	ld	r22, Y
 4e2:	60 5d       	subi	r22, 0xD0	; 208
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_Write>
 4ea:	e1 cf       	rjmp	.-62     	; 0x4ae <main+0x98>

000004ec <__umulhisi3>:
 4ec:	a2 9f       	mul	r26, r18
 4ee:	b0 01       	movw	r22, r0
 4f0:	b3 9f       	mul	r27, r19
 4f2:	c0 01       	movw	r24, r0
 4f4:	a3 9f       	mul	r26, r19
 4f6:	70 0d       	add	r23, r0
 4f8:	81 1d       	adc	r24, r1
 4fa:	11 24       	eor	r1, r1
 4fc:	91 1d       	adc	r25, r1
 4fe:	b2 9f       	mul	r27, r18
 500:	70 0d       	add	r23, r0
 502:	81 1d       	adc	r24, r1
 504:	11 24       	eor	r1, r1
 506:	91 1d       	adc	r25, r1
 508:	08 95       	ret

0000050a <_exit>:
 50a:	f8 94       	cli

0000050c <__stop_program>:
 50c:	ff cf       	rjmp	.-2      	; 0x50c <__stop_program>
