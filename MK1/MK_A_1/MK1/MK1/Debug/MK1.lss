
MK1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000001fe  00000292  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800116  00800116  000002a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000816  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c2  00000000  00000000  00000b56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002e6  00000000  00000000  00001218  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001500  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003bc  00000000  00000000  00001554  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000189  00000000  00000000  00001910  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001a99  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ef       	ldi	r30, 0xFE	; 254
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e1       	ldi	r26, 0x16	; 22
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 31       	cpi	r26, 0x18	; 24
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 88 00 	call	0x110	; 0x110 <main>
  9e:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_1>:

volatile int button = 0;
volatile int switch_state = 1;
volatile int counter = 0;
ISR(INT0_vect)
{ // Обработчик прерывания
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
  b4:	ef 93       	push	r30
  b6:	ff 93       	push	r31
	if(switch_state == 1)
  b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  bc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	29 f4       	brne	.+10     	; 0xce <__vector_1+0x28>
	{
		switch_state = 0;	
  c4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
  c8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
  cc:	18 c0       	rjmp	.+48     	; 0xfe <__vector_1+0x58>
	}
	 else
	{
		switch_state = 0;
  ce:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
  d2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
		counter = 0;
  d6:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <__data_end+0x1>
  da:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end>
		PORTB = segments[counter];
  de:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <__data_end>
  e2:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <__data_end+0x1>
  e6:	e4 5f       	subi	r30, 0xF4	; 244
  e8:	fe 4f       	sbci	r31, 0xFE	; 254
  ea:	80 81       	ld	r24, Z
  ec:	85 b9       	out	0x05, r24	; 5
		PORTD = segments1[counter];
  ee:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <__data_end>
  f2:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <__data_end+0x1>
  f6:	ee 5f       	subi	r30, 0xFE	; 254
  f8:	fe 4f       	sbci	r31, 0xFE	; 254
  fa:	80 81       	ld	r24, Z
  fc:	8b b9       	out	0x0b, r24	; 11
	}
}
  fe:	ff 91       	pop	r31
 100:	ef 91       	pop	r30
 102:	9f 91       	pop	r25
 104:	8f 91       	pop	r24
 106:	0f 90       	pop	r0
 108:	0f be       	out	0x3f, r0	; 63
 10a:	0f 90       	pop	r0
 10c:	1f 90       	pop	r1
 10e:	18 95       	reti

00000110 <main>:

int main(void)
{
	DDRB = 0xFF;
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xFF;
 114:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PD2);
 116:	5a 9a       	sbi	0x0b, 2	; 11
	EIMSK |= (1<<INT0); //Включаем INT0
 118:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= (1<<ISC01); //Прерывание по спадающему фронту INT0
 11a:	e9 e6       	ldi	r30, 0x69	; 105
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	82 60       	ori	r24, 0x02	; 2
 122:	80 83       	st	Z, r24
	sei(); //Глобальное разрешение прерываний
 124:	78 94       	sei
	counter = 0;
 126:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <__data_end+0x1>
 12a:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end>
 12e:	26 e1       	ldi	r18, 0x16	; 22
 130:	31 e0       	ldi	r19, 0x01	; 1
			{
				i += 0;
				PORTB = segments[i];
				_delay_ms(500);
			}
				PORTB = segments[0];
 132:	ac e0       	ldi	r26, 0x0C	; 12
 134:	b1 e0       	ldi	r27, 0x01	; 1
	EICRA |= (1<<ISC01); //Прерывание по спадающему фронту INT0
	sei(); //Глобальное разрешение прерываний
	counter = 0;
	while(1)
	{
		if(switch_state == 0)
 136:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 13a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 13e:	89 2b       	or	r24, r25
 140:	d1 f7       	brne	.-12     	; 0x136 <main+0x26>
		{
			if(counter < 10)
 142:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 146:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
 14a:	0a 97       	sbiw	r24, 0x0a	; 10
 14c:	dc f4       	brge	.+54     	; 0x184 <main+0x74>
			{
				PORTD = segments1[counter];
 14e:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <__data_end>
 152:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <__data_end+0x1>
 156:	ee 5f       	subi	r30, 0xFE	; 254
 158:	fe 4f       	sbci	r31, 0xFE	; 254
 15a:	80 81       	ld	r24, Z
 15c:	8b b9       	out	0x0b, r24	; 11
				counter += 1;
 15e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 162:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
 166:	01 96       	adiw	r24, 0x01	; 1
 168:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__data_end+0x1>
 16c:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 170:	4f e9       	ldi	r20, 0x9F	; 159
 172:	86 e8       	ldi	r24, 0x86	; 134
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	41 50       	subi	r20, 0x01	; 1
 178:	80 40       	sbci	r24, 0x00	; 0
 17a:	90 40       	sbci	r25, 0x00	; 0
 17c:	e1 f7       	brne	.-8      	; 0x176 <main+0x66>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <main+0x70>
 180:	00 00       	nop
 182:	38 c0       	rjmp	.+112    	; 0x1f4 <main+0xe4>
				_delay_ms(500);
			}
			else
			{
				counter = 0;
 184:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <__data_end+0x1>
 188:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end>
				PORTD = segments1[counter];
 18c:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <__data_end>
 190:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <__data_end+0x1>
 194:	ee 5f       	subi	r30, 0xFE	; 254
 196:	fe 4f       	sbci	r31, 0xFE	; 254
 198:	80 81       	ld	r24, Z
 19a:	8b b9       	out	0x0b, r24	; 11
				counter += 1;
 19c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 1a0:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
 1a4:	01 96       	adiw	r24, 0x01	; 1
 1a6:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__data_end+0x1>
 1aa:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
 1ae:	4f e9       	ldi	r20, 0x9F	; 159
 1b0:	86 e8       	ldi	r24, 0x86	; 134
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	41 50       	subi	r20, 0x01	; 1
 1b6:	80 40       	sbci	r24, 0x00	; 0
 1b8:	90 40       	sbci	r25, 0x00	; 0
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <main+0xa4>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <main+0xae>
 1be:	00 00       	nop
 1c0:	19 c0       	rjmp	.+50     	; 0x1f4 <main+0xe4>
				_delay_ms(500);
			}
			for(int i = 0; i<10; i++)
			{
				i += 0;
				PORTB = segments[i];
 1c2:	81 91       	ld	r24, Z+
 1c4:	85 b9       	out	0x05, r24	; 5
 1c6:	4f e9       	ldi	r20, 0x9F	; 159
 1c8:	86 e8       	ldi	r24, 0x86	; 134
 1ca:	91 e0       	ldi	r25, 0x01	; 1
 1cc:	41 50       	subi	r20, 0x01	; 1
 1ce:	80 40       	sbci	r24, 0x00	; 0
 1d0:	90 40       	sbci	r25, 0x00	; 0
 1d2:	e1 f7       	brne	.-8      	; 0x1cc <main+0xbc>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <main+0xc6>
 1d6:	00 00       	nop
				counter = 0;
				PORTD = segments1[counter];
				counter += 1;
				_delay_ms(500);
			}
			for(int i = 0; i<10; i++)
 1d8:	e2 17       	cp	r30, r18
 1da:	f3 07       	cpc	r31, r19
 1dc:	91 f7       	brne	.-28     	; 0x1c2 <main+0xb2>
			{
				i += 0;
				PORTB = segments[i];
				_delay_ms(500);
			}
				PORTB = segments[0];
 1de:	8c 91       	ld	r24, X
 1e0:	85 b9       	out	0x05, r24	; 5
				PORTD = segments1[counter];	
 1e2:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <__data_end>
 1e6:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <__data_end+0x1>
 1ea:	ee 5f       	subi	r30, 0xFE	; 254
 1ec:	fe 4f       	sbci	r31, 0xFE	; 254
 1ee:	80 81       	ld	r24, Z
 1f0:	8b b9       	out	0x0b, r24	; 11
 1f2:	a1 cf       	rjmp	.-190    	; 0x136 <main+0x26>
 1f4:	ec e0       	ldi	r30, 0x0C	; 12
 1f6:	f1 e0       	ldi	r31, 0x01	; 1
 1f8:	e4 cf       	rjmp	.-56     	; 0x1c2 <main+0xb2>

000001fa <_exit>:
 1fa:	f8 94       	cli

000001fc <__stop_program>:
 1fc:	ff cf       	rjmp	.-2      	; 0x1fc <__stop_program>
