
MK1_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000001ee  00000282  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800116  00800116  00000298  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007d8  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006df  00000000  00000000  00000b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002cc  00000000  00000000  000011e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000014b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c2  00000000  00000000  00001508  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ab  00000000  00000000  000018ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001975  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ee       	ldi	r30, 0xEE	; 238
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e1       	ldi	r26, 0x16	; 22
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 31       	cpi	r26, 0x1A	; 26
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 99 00 	call	0x132	; 0x132 <main>
  9e:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_1>:
volatile int button = 0;
volatile int switch_state = 1;
volatile int counter = 0;
volatile int i = 0;
ISR(INT0_vect)
{ // Обработчик прерывания
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
  b4:	ef 93       	push	r30
  b6:	ff 93       	push	r31
	if(switch_state == 1)
  b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  bc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	29 f4       	brne	.+10     	; 0xce <__vector_1+0x28>
	{
		switch_state = 0;
  c4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
  c8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
  cc:	29 c0       	rjmp	.+82     	; 0x120 <__vector_1+0x7a>
		}
		else
		{
		switch_state = 0;
  ce:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
  d2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
		counter += 1;
  d6:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <counter>
  da:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <counter+0x1>
  de:	01 96       	adiw	r24, 0x01	; 1
  e0:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <counter+0x1>
  e4:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <counter>
		if (i==1 && counter == 6)
  e8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
  ec:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	71 f4       	brne	.+28     	; 0x110 <__vector_1+0x6a>
  f4:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <counter>
  f8:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <counter+0x1>
  fc:	06 97       	sbiw	r24, 0x06	; 6
  fe:	41 f4       	brne	.+16     	; 0x110 <__vector_1+0x6a>
		{
			i = 0;
 100:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <__data_end+0x1>
 104:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end>
			counter = 0;
 108:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <counter+0x1>
 10c:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <counter>
		}
		PORTD = segments1[i];
 110:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <__data_end>
 114:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <__data_end+0x1>
 118:	ee 5f       	subi	r30, 0xFE	; 254
 11a:	fe 4f       	sbci	r31, 0xFE	; 254
 11c:	80 81       	ld	r24, Z
 11e:	8b b9       	out	0x0b, r24	; 11
	}
}
 120:	ff 91       	pop	r31
 122:	ef 91       	pop	r30
 124:	9f 91       	pop	r25
 126:	8f 91       	pop	r24
 128:	0f 90       	pop	r0
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	0f 90       	pop	r0
 12e:	1f 90       	pop	r1
 130:	18 95       	reti

00000132 <main>:
int main(void)
{
	DDRD = 0xFF; // регистр режима работы порта D, шестнадцатеричный код
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF; // регистр режима работы порта B, шестнадцатеричный код
 136:	84 b9       	out	0x04, r24	; 4
	PORTD |= (1<<PD2); // регистр, который зависит от того, что записано в DDR
 138:	5a 9a       	sbi	0x0b, 2	; 11
	// свиг числа 1 на 2 позиции влево
	EIMSK |= (1<<INT0); //Включаем INT0
 13a:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= (1<<ISC01); //Прерывание по спадающему фронту INT0
 13c:	e9 e6       	ldi	r30, 0x69	; 105
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	82 60       	ori	r24, 0x02	; 2
 144:	80 83       	st	Z, r24
	sei(); //Глобальное разрешение прерываний
 146:	78 94       	sei

	while(1) //  бесконечный цикл
	{
		if(switch_state == 0)
 148:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 14c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 150:	89 2b       	or	r24, r25
 152:	d1 f7       	brne	.-12     	; 0x148 <main+0x16>
		{
			if(counter < 10)
 154:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <counter>
 158:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <counter+0x1>
 15c:	0a 97       	sbiw	r24, 0x0a	; 10
 15e:	94 f4       	brge	.+36     	; 0x184 <main+0x52>
			{
				PORTB = segments[counter];
 160:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <counter>
 164:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <counter+0x1>
 168:	e4 5f       	subi	r30, 0xF4	; 244
 16a:	fe 4f       	sbci	r31, 0xFE	; 254
 16c:	80 81       	ld	r24, Z
 16e:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 170:	2f e9       	ldi	r18, 0x9F	; 159
 172:	86 e8       	ldi	r24, 0x86	; 134
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	21 50       	subi	r18, 0x01	; 1
 178:	80 40       	sbci	r24, 0x00	; 0
 17a:	90 40       	sbci	r25, 0x00	; 0
 17c:	e1 f7       	brne	.-8      	; 0x176 <main+0x44>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <main+0x4e>
 180:	00 00       	nop
 182:	e2 cf       	rjmp	.-60     	; 0x148 <main+0x16>
				_delay_ms(500); // задержка на 500 мс
			}
			else 
			{
			counter = 0;
 184:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <counter+0x1>
 188:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <counter>
			i += 1;
 18c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 190:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
 194:	01 96       	adiw	r24, 0x01	; 1
 196:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__data_end+0x1>
 19a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
			PORTB = segments[counter];
 19e:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <counter>
 1a2:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <counter+0x1>
 1a6:	e4 5f       	subi	r30, 0xF4	; 244
 1a8:	fe 4f       	sbci	r31, 0xFE	; 254
 1aa:	80 81       	ld	r24, Z
 1ac:	85 b9       	out	0x05, r24	; 5
			counter = i;
 1ae:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 1b2:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
 1b6:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <counter+0x1>
 1ba:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <counter>
			PORTD = segments1[counter];
 1be:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <counter>
 1c2:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <counter+0x1>
 1c6:	ee 5f       	subi	r30, 0xFE	; 254
 1c8:	fe 4f       	sbci	r31, 0xFE	; 254
 1ca:	80 81       	ld	r24, Z
 1cc:	8b b9       	out	0x0b, r24	; 11
			counter = 0;
 1ce:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <counter+0x1>
 1d2:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <counter>
 1d6:	2f e9       	ldi	r18, 0x9F	; 159
 1d8:	86 e8       	ldi	r24, 0x86	; 134
 1da:	91 e0       	ldi	r25, 0x01	; 1
 1dc:	21 50       	subi	r18, 0x01	; 1
 1de:	80 40       	sbci	r24, 0x00	; 0
 1e0:	90 40       	sbci	r25, 0x00	; 0
 1e2:	e1 f7       	brne	.-8      	; 0x1dc <main+0xaa>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <main+0xb4>
 1e6:	00 00       	nop
 1e8:	af cf       	rjmp	.-162    	; 0x148 <main+0x16>

000001ea <_exit>:
 1ea:	f8 94       	cli

000001ec <__stop_program>:
 1ec:	ff cf       	rjmp	.-2      	; 0x1ec <__stop_program>
