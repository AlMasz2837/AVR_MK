
MK2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000002e4  00000378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  0080010a  0080010a  00000382  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000382  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008c2  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006d7  00000000  00000000  00000d26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003b1  00000000  00000000  000013fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000017b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d0  00000000  00000000  00001910  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000296  00000000  00000000  00001ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00001f76  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 08 01 	jmp	0x210	; 0x210 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ee       	ldi	r30, 0xE4	; 228
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 30       	cpi	r26, 0x0F	; 15
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 4e 01 	call	0x29c	; 0x29c <main>
  9e:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <InitPorts>:
	}
}
//--------------------------------------------
void InitPorts(void)
{
	DDRB = (1<<PB0|1<<PB1|1<<PB3|1<<PB5);
  a6:	8b e2       	ldi	r24, 0x2B	; 43
  a8:	84 b9       	out	0x04, r24	; 4
	DDRD &= ~(1<<PD2);
  aa:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= (1<<PD2);
  ac:	5a 9a       	sbi	0x0b, 2	; 11
  ae:	08 95       	ret

000000b0 <InitTimer1>:
}
void InitTimer1(void)
{
	TCCR1A = 0;
  b0:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = (1<<CS11|1<<CS10|1<<WGM12);
  b4:	8b e0       	ldi	r24, 0x0B	; 11
  b6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TCNT1 = 0;
  ba:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  be:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	OCR1A = 15624;
  c2:	88 e0       	ldi	r24, 0x08	; 8
  c4:	9d e3       	ldi	r25, 0x3D	; 61
  c6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  ca:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  ce:	08 95       	ret

000000d0 <StartTimer1>:
}
void StartTimer1(void)
{
	TCNT1 = 0;
  d0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  d4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TIMSK1 |= (1<<OCIE1A);
  d8:	ef e6       	ldi	r30, 0x6F	; 111
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	82 60       	ori	r24, 0x02	; 2
  e0:	80 83       	st	Z, r24
  e2:	08 95       	ret

000000e4 <StopTimer1>:
}
void StopTimer1(void)
{
	TIMSK1 &= ~(1<<OCIE1A);
  e4:	ef e6       	ldi	r30, 0x6F	; 111
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	8d 7f       	andi	r24, 0xFD	; 253
  ec:	80 83       	st	Z, r24
  ee:	08 95       	ret

000000f0 <Bin2Dec>:
}
void Bin2Dec(uint16_t data)
{
  f0:	ac 01       	movw	r20, r24
	// 	bcd_buffer[3] = (uint8_t)(data/1000);
	// 	data = data % 1000;
	// 	bcd_buffer[2] = (uint8_t)(data/100);
	// 	data = data % 100;
	bcd_buffer[1] = (uint8_t)(data/10);
  f2:	9c 01       	movw	r18, r24
  f4:	ad ec       	ldi	r26, 0xCD	; 205
  f6:	bc ec       	ldi	r27, 0xCC	; 204
  f8:	0e 94 61 01 	call	0x2c2	; 0x2c2 <__umulhisi3>
  fc:	96 95       	lsr	r25
  fe:	87 95       	ror	r24
 100:	96 95       	lsr	r25
 102:	87 95       	ror	r24
 104:	96 95       	lsr	r25
 106:	87 95       	ror	r24
 108:	ea e0       	ldi	r30, 0x0A	; 10
 10a:	f1 e0       	ldi	r31, 0x01	; 1
 10c:	81 83       	std	Z+1, r24	; 0x01
	data = data % 10;
	bcd_buffer[0] = (uint8_t)(data);
 10e:	9c 01       	movw	r18, r24
 110:	22 0f       	add	r18, r18
 112:	33 1f       	adc	r19, r19
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	82 0f       	add	r24, r18
 122:	93 1f       	adc	r25, r19
 124:	48 1b       	sub	r20, r24
 126:	59 0b       	sbc	r21, r25
 128:	40 83       	st	Z, r20
 12a:	08 95       	ret

0000012c <SendData>:
}
void SendData(uint8_t data)
{
 12c:	20 e0       	ldi	r18, 0x00	; 0
 12e:	30 e0       	ldi	r19, 0x00	; 0
	for(uint8_t i=0; i<8; i++)
	{
		PORTB |= (1<<PB5); //CLK low
		if(0x80 & (data<<i))
 130:	68 2f       	mov	r22, r24
 132:	70 e0       	ldi	r23, 0x00	; 0
}
void SendData(uint8_t data)
{
	for(uint8_t i=0; i<8; i++)
	{
		PORTB |= (1<<PB5); //CLK low
 134:	2d 9a       	sbi	0x05, 5	; 5
		if(0x80 & (data<<i))
 136:	ab 01       	movw	r20, r22
 138:	02 2e       	mov	r0, r18
 13a:	02 c0       	rjmp	.+4      	; 0x140 <SendData+0x14>
 13c:	44 0f       	add	r20, r20
 13e:	55 1f       	adc	r21, r21
 140:	0a 94       	dec	r0
 142:	e2 f7       	brpl	.-8      	; 0x13c <SendData+0x10>
 144:	47 ff       	sbrs	r20, 7
 146:	02 c0       	rjmp	.+4      	; 0x14c <SendData+0x20>
		{
			PORTB |= 1<<PB3; //DAT high
 148:	2b 9a       	sbi	0x05, 3	; 5
 14a:	01 c0       	rjmp	.+2      	; 0x14e <SendData+0x22>
		}
		else
		{
			PORTB &= ~(1<<PB3); //DAT low
 14c:	2b 98       	cbi	0x05, 3	; 5
		}
		PORTB &= ~(1<<PB5); //CLK high
 14e:	2d 98       	cbi	0x05, 5	; 5
 150:	2f 5f       	subi	r18, 0xFF	; 255
 152:	3f 4f       	sbci	r19, 0xFF	; 255
	data = data % 10;
	bcd_buffer[0] = (uint8_t)(data);
}
void SendData(uint8_t data)
{
	for(uint8_t i=0; i<8; i++)
 154:	28 30       	cpi	r18, 0x08	; 8
 156:	31 05       	cpc	r19, r1
 158:	69 f7       	brne	.-38     	; 0x134 <SendData+0x8>
		{
			PORTB &= ~(1<<PB3); //DAT low
		}
		PORTB &= ~(1<<PB5); //CLK high
	}
	SPDR = data;
 15a:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
 15c:	0d b4       	in	r0, 0x2d	; 45
 15e:	07 fe       	sbrs	r0, 7
 160:	fd cf       	rjmp	.-6      	; 0x15c <SendData+0x30>
}
 162:	08 95       	ret

00000164 <DisplayData>:
void DisplayData(uint16_t data)
{
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
	Bin2Dec(data);
 168:	0e 94 78 00 	call	0xf0	; 0xf0 <Bin2Dec>
	PORTB &= ~(1<<PB1); //clk_out = 0
 16c:	29 98       	cbi	0x05, 1	; 5
	SendData(segments[bcd_buffer[0]]);
 16e:	ca e0       	ldi	r28, 0x0A	; 10
 170:	d1 e0       	ldi	r29, 0x01	; 1
 172:	e8 81       	ld	r30, Y
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	e0 50       	subi	r30, 0x00	; 0
 178:	ff 4f       	sbci	r31, 0xFF	; 255
 17a:	80 81       	ld	r24, Z
 17c:	0e 94 96 00 	call	0x12c	; 0x12c <SendData>
	SendData(segments[bcd_buffer[1]]);
 180:	e9 81       	ldd	r30, Y+1	; 0x01
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	e0 50       	subi	r30, 0x00	; 0
 186:	ff 4f       	sbci	r31, 0xFF	; 255
 188:	80 81       	ld	r24, Z
 18a:	0e 94 96 00 	call	0x12c	; 0x12c <SendData>
	// 	SendData(segments[bcd_buffer[2]]);
	// 	SendData(segments[bcd_buffer[3]]);
	PORTB |= (1<<PB1); //clk_out = 1
 18e:	29 9a       	sbi	0x05, 1	; 5
}
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <__vector_11>:
		
	}
}
//--------------------------------------------
ISR(TIMER1_COMPA_vect)
{
 196:	1f 92       	push	r1
 198:	0f 92       	push	r0
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	0f 92       	push	r0
 19e:	11 24       	eor	r1, r1
 1a0:	2f 93       	push	r18
 1a2:	3f 93       	push	r19
 1a4:	4f 93       	push	r20
 1a6:	5f 93       	push	r21
 1a8:	6f 93       	push	r22
 1aa:	7f 93       	push	r23
 1ac:	8f 93       	push	r24
 1ae:	9f 93       	push	r25
 1b0:	af 93       	push	r26
 1b2:	bf 93       	push	r27
 1b4:	ef 93       	push	r30
 1b6:	ff 93       	push	r31
	DisplayData(cnt);
 1b8:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <cnt>
 1bc:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <cnt+0x1>
 1c0:	0e 94 b2 00 	call	0x164	; 0x164 <DisplayData>
	if(cnt<99)
 1c4:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <cnt>
 1c8:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <cnt+0x1>
 1cc:	83 36       	cpi	r24, 0x63	; 99
 1ce:	91 05       	cpc	r25, r1
 1d0:	50 f4       	brcc	.+20     	; 0x1e6 <__vector_11+0x50>
	{
		cnt++;
 1d2:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <cnt>
 1d6:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <cnt+0x1>
 1da:	01 96       	adiw	r24, 0x01	; 1
 1dc:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <cnt+0x1>
 1e0:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <cnt>
 1e4:	04 c0       	rjmp	.+8      	; 0x1ee <__vector_11+0x58>
	}
	else
	{
		cnt=0;
 1e6:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <cnt+0x1>
 1ea:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <cnt>
	}
}
 1ee:	ff 91       	pop	r31
 1f0:	ef 91       	pop	r30
 1f2:	bf 91       	pop	r27
 1f4:	af 91       	pop	r26
 1f6:	9f 91       	pop	r25
 1f8:	8f 91       	pop	r24
 1fa:	7f 91       	pop	r23
 1fc:	6f 91       	pop	r22
 1fe:	5f 91       	pop	r21
 200:	4f 91       	pop	r20
 202:	3f 91       	pop	r19
 204:	2f 91       	pop	r18
 206:	0f 90       	pop	r0
 208:	0f be       	out	0x3f, r0	; 63
 20a:	0f 90       	pop	r0
 20c:	1f 90       	pop	r1
 20e:	18 95       	reti

00000210 <__vector_1>:
ISR(INT0_vect)
{
 210:	1f 92       	push	r1
 212:	0f 92       	push	r0
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	0f 92       	push	r0
 218:	11 24       	eor	r1, r1
 21a:	2f 93       	push	r18
 21c:	3f 93       	push	r19
 21e:	4f 93       	push	r20
 220:	5f 93       	push	r21
 222:	6f 93       	push	r22
 224:	7f 93       	push	r23
 226:	8f 93       	push	r24
 228:	9f 93       	push	r25
 22a:	af 93       	push	r26
 22c:	bf 93       	push	r27
 22e:	ef 93       	push	r30
 230:	ff 93       	push	r31
	if(switch_state == 0)
 232:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <switch_state>
 236:	81 11       	cpse	r24, r1
 238:	06 c0       	rjmp	.+12     	; 0x246 <__vector_1+0x36>
	{
		switch_state = 1;
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <switch_state>
		StartTimer1();
 240:	0e 94 68 00 	call	0xd0	; 0xd0 <StartTimer1>
 244:	0e c0       	rjmp	.+28     	; 0x262 <__vector_1+0x52>
	}
	else
	{
		StopTimer1();
 246:	0e 94 72 00 	call	0xe4	; 0xe4 <StopTimer1>
		DisplayData(cnt);
 24a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <cnt>
 24e:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <cnt+0x1>
 252:	0e 94 b2 00 	call	0x164	; 0x164 <DisplayData>
		switch_state = 0;
 256:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <switch_state>
		cnt = 0;
 25a:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <cnt+0x1>
 25e:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <cnt>
	}
}
 262:	ff 91       	pop	r31
 264:	ef 91       	pop	r30
 266:	bf 91       	pop	r27
 268:	af 91       	pop	r26
 26a:	9f 91       	pop	r25
 26c:	8f 91       	pop	r24
 26e:	7f 91       	pop	r23
 270:	6f 91       	pop	r22
 272:	5f 91       	pop	r21
 274:	4f 91       	pop	r20
 276:	3f 91       	pop	r19
 278:	2f 91       	pop	r18
 27a:	0f 90       	pop	r0
 27c:	0f be       	out	0x3f, r0	; 63
 27e:	0f 90       	pop	r0
 280:	1f 90       	pop	r1
 282:	18 95       	reti

00000284 <InitSPI>:
	// 	SendData(segments[bcd_buffer[3]]);
	PORTB |= (1<<PB1); //clk_out = 1
}
void InitSPI(void)
{
	DDRB |= (1<<PB3 | 1<<PB5);//настроить MOSI и CLK как выходы
 284:	84 b1       	in	r24, 0x04	; 4
 286:	88 62       	ori	r24, 0x28	; 40
 288:	84 b9       	out	0x04, r24	; 4
	SPSR |= (1<<SPI2X); //Fclk = Fosc/2
 28a:	8d b5       	in	r24, 0x2d	; 45
 28c:	81 60       	ori	r24, 0x01	; 1
 28e:	8d bd       	out	0x2d, r24	; 45
	SPCR = (1<<SPE | 1<<MSTR); //SPI включен,мастер,
 290:	80 e5       	ldi	r24, 0x50	; 80
 292:	8c bd       	out	0x2c, r24	; 44
	//MSB первый, CPOL=0, CPHA=0
	PORTB &= ~(1<<PB3 | 1<<PB5);
 294:	85 b1       	in	r24, 0x05	; 5
 296:	87 7d       	andi	r24, 0xD7	; 215
 298:	85 b9       	out	0x05, r24	; 5
 29a:	08 95       	ret

0000029c <main>:
volatile uint16_t cnt = 0;
volatile uint8_t switch_state = 0;
volatile uint8_t bcd_buffer[] = {0,0};
int main(void)
{
	InitPorts();
 29c:	0e 94 53 00 	call	0xa6	; 0xa6 <InitPorts>
	InitSPI();
 2a0:	0e 94 42 01 	call	0x284	; 0x284 <InitSPI>
	InitTimer1();
 2a4:	0e 94 58 00 	call	0xb0	; 0xb0 <InitTimer1>
	EIMSK |= (1<<INT0); //разрешить прерывание INT0
 2a8:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= (1<<ISC01);//Запуск по заднему фронту INT0
 2aa:	e9 e6       	ldi	r30, 0x69	; 105
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 81       	ld	r24, Z
 2b0:	82 60       	ori	r24, 0x02	; 2
 2b2:	80 83       	st	Z, r24
	sei(); //Разрешение прерываний
 2b4:	78 94       	sei
	PORTB &= ~(1<<PB0); //OE = low (active)
 2b6:	28 98       	cbi	0x05, 0	; 5
	DisplayData(0);
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	0e 94 b2 00 	call	0x164	; 0x164 <DisplayData>
 2c0:	ff cf       	rjmp	.-2      	; 0x2c0 <main+0x24>

000002c2 <__umulhisi3>:
 2c2:	a2 9f       	mul	r26, r18
 2c4:	b0 01       	movw	r22, r0
 2c6:	b3 9f       	mul	r27, r19
 2c8:	c0 01       	movw	r24, r0
 2ca:	a3 9f       	mul	r26, r19
 2cc:	70 0d       	add	r23, r0
 2ce:	81 1d       	adc	r24, r1
 2d0:	11 24       	eor	r1, r1
 2d2:	91 1d       	adc	r25, r1
 2d4:	b2 9f       	mul	r27, r18
 2d6:	70 0d       	add	r23, r0
 2d8:	81 1d       	adc	r24, r1
 2da:	11 24       	eor	r1, r1
 2dc:	91 1d       	adc	r25, r1
 2de:	08 95       	ret

000002e0 <_exit>:
 2e0:	f8 94       	cli

000002e2 <__stop_program>:
 2e2:	ff cf       	rjmp	.-2      	; 0x2e2 <__stop_program>
